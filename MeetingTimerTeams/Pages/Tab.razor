@page "/tab"
@using Microsoft.Extensions.Configuration
@using System.IO
@using Microsoft.Graph
@inject NavigationManager MyNavigationManager
@inject IConfiguration Configuration
@inject IJSRuntime jsRuntime

<div class="welcome page">
    <div class="narrow page-padding">
        <img src="hello.png" />
        <h1 class="center">
            Meeting Zen
        </h1>
        <h3 class="center">5min for your mind and between meetings</h3>
        <div class="center">
            @if (!IsLoading)
            {
                @*<FluentButton Appearance="Appearance.Accent" @onclick="GetUserCalendar">Calendar</FluentButton>*@

                 @if (calendarEvents != null)
        {
            <FluentRadioGroup @bind-value="eventID">
                @foreach (var cal in calendarEvents)
                {
                    <FluentRadio Value="@cal.Subject" @onclick="(() => ViewEventDetails(cal))">@cal.Subject</FluentRadio>
                }
            </FluentRadioGroup>
            <br>
        }

        @if (meetingTitle != null)
        {
            <FluentMenu>
                <FluentMenuItem>Meeting: @meetingTitle </FluentMenuItem>
                <FluentMenuItem>Start time: <b>@meetingStart</b></FluentMenuItem>
                <FluentMenuItem>End time: @meetingEnd </FluentMenuItem>
            </FluentMenu>
            <br>
            <FluentButton Appearance="Appearance.Accent" @onclick="MeetingZenClick">Shorten 5 min</FluentButton>
            <FluentBadge Appearance="Appearance.Neutral">@zenMessage</FluentBadge>

        }
            }
            else if (IsLoading)
            {
                <FluentProgressRing class="center"/>
               <text>Getting meetings you organized</text> 
            }
        </div>

       
        @if (!String.IsNullOrEmpty(UserPhotoUri))
        {
            <div class="profile">
                <img class="avatar" src="@UserPhotoUri" />
                <div class="info">
                    <h3>@UserName</h3>
                    <p>@Title</p>
                    <p>@Email</p>
                </div>
            </div>
        }

    </div>
</div>

@code {
    TeamsFx _teamsfx;
    TeamsFx teamsfx => _teamsfx ??= new TeamsFx(jsRuntime);
    string _clientId, _endpoint;

    public string meetingTitle { get; set; }
    public string meetingStart { get; set; }
    public string meetingEnd { get; set; }
    public string zenMessage { get; set; }
    public string eventID = "";

    private Microsoft.Graph.Event selectedEvent;
    private TimeZoneInfo systemTimeZone = TimeZoneInfo.Local;
    public IUserCalendarViewCollectionPage calendarEvents { get; set; }

    #region UserProfileFields
    public string UserName { get; set; }
    public string Email { get; set; }
    public string Title { get; set; }
    public string UserPhotoUri { get; set; }
    public bool IsLoading { get; set; }
    #endregion


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            _clientId = Configuration.GetValue<string>("CLIENT_ID");
            _endpoint = MyNavigationManager.BaseUri;

            await teamsfx.Init(_clientId, _endpoint, _endpoint);

            var user = await teamsfx.GetInfoAsync();

            UserName = user.DisplayName;

            StateHasChanged();
        }
        catch (Exception) { }

        if (firstRender)
        {
            await GetUserCalendar();
        }

    }

    void StartupMethod()
    {
        //GetUserCalendar();
    }

    Task SomeStartupTask()
    {
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        //StartupMethod();
        //await SomeStartupTask();

        await GetUserCalendar();
    }

    private async Task GetUserCalendar()
    {
        try
        {
            IsLoading = true;

            var queryOptions = new List<QueryOption>()
        {
        new QueryOption("startdatetime", DateTimeTimeZone.FromDateTime(DateTime.Now.ToUniversalTime()).DateTime),
        new QueryOption("enddatetime", DateTimeTimeZone.FromDateTime(DateTime.Now.AddDays(7).ToUniversalTime()).DateTime),
        new QueryOption("$filter","isOrganizer eq true" )
        };

            var graphClient = teamsfx.GetGraphServiceClient();
            try
            {
                var calendar = await graphClient.Me.CalendarView.Request(queryOptions).GetAsync();

                calendarEvents = calendar;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error " + ex.Message);
            }
        }
        finally
        {
            IsLoading = false;
        }
    }

    public void ViewEventDetails(Microsoft.Graph.Event calEvent)
    {
        DateTime startTime = TimeZoneInfo.ConvertTimeFromUtc(Convert.ToDateTime(calEvent.Start.DateTime.ToString()), systemTimeZone);
        DateTime endTime = TimeZoneInfo.ConvertTimeFromUtc(Convert.ToDateTime(calEvent.End.DateTime.ToString()), systemTimeZone);

        meetingTitle = calEvent.Subject;
        meetingStart = startTime.ToString(); 
        meetingEnd = endTime.ToString(); 
        zenMessage = "";

        selectedEvent = calEvent;
    }

    public async Task MeetingZenClick()
    {
        var graphClient = teamsfx.GetGraphServiceClient();
        var eventUpdate = selectedEvent;
        string startTimeStr = eventUpdate.Start.DateTime;
        DateTime startTime = DateTime.Parse(startTimeStr);

        startTime = startTime.AddMinutes(5);
        eventUpdate.Start.DateTime = DateTimeTimeZone.FromDateTime(startTime).DateTime;

        try
        {
            await graphClient.Me.Events[eventUpdate.Id]
                .Request()
                .UpdateAsync(@eventUpdate);
            meetingStart = startTime.ToLocalTime().ToString();
            zenMessage = "☯ 5min given back ☯";

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error " + ex.Message);
        }
    }

    private async Task GetUserProfilePhoto()
    {
        try
        {
            IsLoading = true;

            var graphClient = teamsfx.GetGraphServiceClient();
            var photoStream = await graphClient.Me.Photo.Content.Request().GetAsync();
            var profile = await graphClient.Me.Request().GetAsync();

            if (photoStream != null)
            {
                // Copy the photo stream to a memory stream
                // to get the bytes out of it
                var memoryStream = new MemoryStream();
                photoStream.CopyTo(memoryStream);
                var photoBytes = memoryStream.ToArray();

                // Generate a data URI for the photo
                UserPhotoUri = $"data:image/png;base64,{Convert.ToBase64String(photoBytes)}";
            }

            Title = profile.JobTitle;
            Email = profile.Mail;
        }
        finally
        {
            IsLoading = false;
        }
    }
}
